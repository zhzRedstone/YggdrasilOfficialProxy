/*
 * Copyright (c) 2018-2020 Karlatemp. All rights reserved.
 * @author Karlatemp <karlatemp@vip.qq.com> <https://github.com/Karlatemp>
 * @create 2020/08/07 12:28:05
 *
 * YggdrasilOfficialProxy/YggdrasilOfficialProxy/build.gradle
 */

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'com.github.johnrengelman.shadow' version '6.0.0'
}


import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

group = "io.github.karlatemp"
version = "2.0.0"

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url = 'https://repo.spongepowered.org/maven'
    }
    maven { url = 'https://dl.bintray.com/kotlin/ktor/' }
}

dependencies {
    compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.4'
    compile 'org.spongepowered:configurate-hocon:3.6.1'

    def ktor_version = "1.3.2"
    compile "io.ktor:ktor-websockets:$ktor_version"
    compile "io.ktor:ktor-server-netty:$ktor_version"
    compile "io.ktor:ktor-http-jvm:$ktor_version"
    compile "io.ktor:ktor-client-okhttp:$ktor_version"
    // compile "io.ktor:ktor-client-apache:$ktor_version"
    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.6'

}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = '1.6'
        freeCompilerArgs += '-Xopt-in=kotlin.RequiresOptIn'
    }
}

tasks.create("standardShadowJar", ShadowJar.class) { task ->
    task.classifier("proxy")
    task.dependsOn('classes')
    task.exclude 'module-info.class'
    task.from(file('build/classes/kotlin/main'))
    task.configurations = new ArrayList<>(
            Arrays.asList(project.configurations.getByName("runtimeClasspath"))
    )

    manifest {
        // Only Proxy Edition can use -jar
        attributes([
                'Premain-Class'               : 'io.github.karlatemp.yop.YggdrasilOfficialProxy',
                'Main-Class'                  : 'io.github.karlatemp.yop.YggdrasilOfficialProxy',
                'Can-Set-Native-Method-Prefix': 'true',
                'Can-Retransform-Classes'     : 'true',
                'Can-Redefine-Classes'        : 'true'
        ])
    }
}
tasks.create("shadowPaperclip", ShadowJar.class) { task ->
    task.classifier("paperclip")
    task.dependsOn('classes')
    task.exclude 'module-info.class'
    def relocateMap = { LinkedHashMap<String, String> args ->
        args.entrySet().each {
            task.relocate it.getKey(), 'io.github.karlatemp.yop.lib.' + it.getValue()
        }
    }
    task.from(file('build/classes/kotlin/main'))
    task.configurations = new ArrayList<>(
            Arrays.asList(project.configurations.getByName("runtimeClasspath"))
    )
    manifest {
        attributes([
                'Premain-Class'               : 'io.github.karlatemp.yop.YggdrasilOfficialProxy',
                'Can-Set-Native-Method-Prefix': 'true',
                'Can-Retransform-Classes'     : 'true',
                'Can-Redefine-Classes'        : 'true'
        ])
    }
    relocateMap([
            'okio'                     : 'okio',
            'okhttp3'                  : 'okhttp.okhttp3',
            'ninja.leaping.configurate': 'org.spongepowered.ninja.leaping.configurate',
            'io.ktor'                  : 'io.ktor',
            'kotlin'                   : 'kotlin',
            'kotlinx'                  : 'kotlin',
            'org.checkerframework'     : 'org.checkerframework',
            'org.eclipse.jetty.alpn'   : 'org.eclipse.jetty.alpn',
            'com.typesafe'             : 'com.typesafe',
            'com.google'               : 'com.google',
            'org.slf4j'                : 'org.slf4j',
            'io.netty'                 : 'io.netty'
    ])
}
task shadowStandard(dependsOn: ['standardShadowJar'])

shadowJar {
    classifier("minecraft")
    manifest {
        attributes([
                'Premain-Class'               : 'io.github.karlatemp.yop.YggdrasilOfficialProxy',
                'Can-Set-Native-Method-Prefix': 'true',
                'Can-Retransform-Classes'     : 'true',
                'Can-Redefine-Classes'        : 'true'
        ])
    }
    exclude 'module-info.class'
    def relocateMap = { LinkedHashMap<String, String> args ->
        args.entrySet().each {
            relocate it.getKey(), 'io.github.karlatemp.yop.lib.' + it.getValue()
        }
    }
    def excl = [
            'com.google.guava',
            'io.netty',
            'com.google.code.gson',
            'org.slf4j'
    ]
    dependencyFilter.exclude {
        if (excl.contains(it.moduleGroup))
            return true
        return false
    }
    relocateMap([
            'okio'                     : 'okio',
            'okhttp3'                  : 'okhttp.okhttp3',
            'ninja.leaping.configurate': 'org.spongepowered.ninja.leaping.configurate',
            'io.ktor'                  : 'io.ktor',
            'kotlin'                   : 'kotlin.kotlin',
            'kotlinx'                  : 'kotlin.kotlinx',
            'org.checkerframework'     : 'org.checkerframework',
            'org.eclipse.jetty.alpn'   : 'org.eclipse.jetty.alpn',
            'com.typesafe'             : 'com.typesafe'
    ])
}
